[{"/Users/alexander/Code/playground/chrome-dev-tools-session/src/TextInputDialog.js":"1","/Users/alexander/Code/playground/chrome-dev-tools-session/src/App.js":"2","/Users/alexander/Code/playground/chrome-dev-tools-session/src/reportWebVitals.js":"3","/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubCommitTableRow.js":"4","/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubApi.js":"5","/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubRepositoryTable.js":"6","/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubModel.js":"7"},{"size":683,"mtime":1608041827278,"results":"8","hashOfConfig":"9"},{"size":1012,"mtime":1608041911658,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608016462825,"results":"11","hashOfConfig":"9"},{"size":596,"mtime":1608038604178,"results":"12","hashOfConfig":"9"},{"size":1659,"mtime":1608041135552,"results":"13","hashOfConfig":"9"},{"size":1722,"mtime":1608041317369,"results":"14","hashOfConfig":"9"},{"size":1112,"mtime":1608038649106,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u3xlfk",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexander/Code/playground/chrome-dev-tools-session/src/TextInputDialog.js",[],"/Users/alexander/Code/playground/chrome-dev-tools-session/src/App.js",["32"],"/Users/alexander/Code/playground/chrome-dev-tools-session/src/reportWebVitals.js",[],["33","34"],"/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubCommitTableRow.js",["35"],"/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubApi.js",["36"],"import {GitHubRepository, GitHubCommit} from './GitHubModel';\n\nexport default class GitHubApi {\n\n    getPublicRepositories = async (username) => {\n        const url = `https://api.github.com/users/${username}/repos`;\n        console.log(`Getting GitHub Repos from ${url}`);\n\n        const response = await fetch(url);\n        console.log(`Receives Response from GitHub: ${response.status}`);\n\n        if(response.status === 200) {\n            const responseBody = await response.json();\n            console.log(`Parsed Response Body from GitHub Repos: ${responseBody.length}`);\n\n            return responseBody.map(repo => {\n                const {name, html_url, description} = repo;\n                return new GitHubRepository(name, html_url, description);\n            });\n        } else {\n            console.log(`Received Error Response!`);\n            throw 'This user does not exist!';\n        }\n    };\n\n    getLatestCommits = async (username, repositoryName) => {\n        const url = `https://api.github.com/repos/${username}/${repositoryName}/commits`;\n        console.log(`Getting GitHub Commits from ${url}`);\n\n        const response = await fetch(url);\n        console.log(`Receives Response from GitHub: ${response.status}`);\n\n        const responseBody = await response.json();\n        console.log(`Parsed Response Body from GitHub Commits: ${responseBody.length}`);\n\n        return responseBody.map(commitRef => new GitHubCommit(commitRef));\n    };\n\n    getAvatarURL = (username) => {\n        const url = `https://avatars.githubusercontent.com/${username}`;\n        console.log(`Getting GitHub Avatar URL: ${url}`);\n        return url;\n    };\n\n}","/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubRepositoryTable.js",[],"/Users/alexander/Code/playground/chrome-dev-tools-session/src/github/GitHubModel.js",[],{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":25},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":15,"column":21,"nodeType":"47","endLine":15,"endColumn":90},{"ruleId":"48","severity":1,"message":"49","line":22,"column":13,"nodeType":"50","messageId":"51","endLine":22,"endColumn":47},"no-unused-vars","'GitHubCommitTable' is defined but never used.","Identifier","unusedVar","no-native-reassign",["52"],"no-negated-in-lhs",["53"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation"]